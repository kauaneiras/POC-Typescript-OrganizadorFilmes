generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model avaliation {
  id               Int           @id @default(autoincrement())
  watchedmovies_id Int
  avaliation       String        @db.VarChar(255)
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  watchedmovies    watchedmovies @relation(fields: [watchedmovies_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model gender {
  id       Int    @id @default(autoincrement())
  gender   String @db.VarChar(255)
  movie_id Int
  movies   movies @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model movies {
  id            Int             @id @default(autoincrement())
  title         String          @db.VarChar(255)
  gender        gender[]
  plataform     plataform[]
  watchedmovies watchedmovies[]
  wishlist      wishlist[]
}

model plataform {
  id        Int    @id @default(autoincrement())
  plataform String @db.VarChar(255)
  movie_id  Int
  movies    movies @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sessions {
  id         Int      @id @default(autoincrement())
  token      String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  user_id    Int
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(255)
  email         String          @unique @db.VarChar(255)
  password      String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  sessions      sessions[]
  watchedmovies watchedmovies[]
  wishlist      wishlist[]
}

model watchedmovies {
  id         Int          @id @default(autoincrement())
  user_id    Int
  movie_id   Int
  created_at DateTime     @default(now()) @db.Timestamp(6)
  movies     movies       @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model wishlist {
  id         Int      @id @default(autoincrement())
  user_id    Int
  movie_id   Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  movies     movies   @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
